(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{651:function(e,n,t){"use strict";t.r(n);var d=t(54),v=Object(d.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-diff"}},[e._v("#")]),e._v(" Vue Diff")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/Picker666/vue-origin-source/tree/main/diff",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现一个Vue2 diff"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("所谓 diff 算法，就是基于虚拟DOM，进行新旧虚拟DOM对象对比的一套算法。")]),e._v(" "),t("h2",{attrs:{id:"diff-过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#diff-过程"}},[e._v("#")]),e._v(" diff 过程")]),e._v(" "),t("ul",[t("li",[e._v("1、首先当我们数据发生变化触发setter；")]),e._v(" "),t("li",[e._v("2、进而，触发发布订阅中心的 Dep.notify 方法；")]),e._v(" "),t("li",[e._v("3、通知订阅者更新，并进行新旧DOM的"),t("strong",[e._v("递归")]),e._v("对比，即 patch(oldvnode, newvnode)；")]),e._v(" "),t("li",[e._v("4、此时，如果新旧的类型不一致，直接使用新DOM替换旧的；类型一致，则继续，此时分情况；\n"),t("ul",[t("li",[e._v("（1）、都是文本节点，用新的"),t("strong",[e._v("替换")]),e._v("旧的即可；")]),e._v(" "),t("li",[e._v("（2）、oldvnode 没有， newvnode 有，此时"),t("strong",[e._v("新增")]),e._v("子节点；")]),e._v(" "),t("li",[e._v("（3）、oldvnode 有，newvnode 没有，此时"),t("strong",[e._v("删除")]),e._v("子节点；")]),e._v(" "),t("li",[e._v("（4）、oldvnode 和 newvnode 都有子节点，此时最为复杂，执行updateChildren")])])]),e._v(" "),t("li",[e._v("5、updateChildren 的更新前提是，同级存在多个虚拟节点，采用首尾指针法对比；\n"),t("ul",[t("li",[e._v("（1）、oldStart === newStart ？成功，oldStartIndex ++； newStartIndex ++; 失败则继续；")]),e._v(" "),t("li",[e._v("（2）、oldStart === newEnd ？成功，oldStartIndex ++； newEndIndex --; 失败则继续；")]),e._v(" "),t("li",[e._v("（3）、oldEnd === newStart ? 成功，oldEndIndex --； newStartIndex ++; 失败则继续；")]),e._v(" "),t("li",[e._v("（4）、oldEnd === newEnd ? 成功，oldEndIndex --； newEndIndex --; 失败则继续；")]),e._v(" "),t("li",[e._v("（5）、")])])])])])}),[],!1,null,null,null);n.default=v.exports}}]);