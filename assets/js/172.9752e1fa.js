(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{560:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"观察者模式-done"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-done"}},[t._v("#")]),t._v(" 观察者模式 (done)")]),t._v(" "),a("p",[t._v("发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。")]),t._v(" "),a("p",[t._v("在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ul id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ul"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ul"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ul "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#ul'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ul"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 get 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。")]),t._v(" "),a("h2",{attrs:{id:"观察者模式实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式实现"}},[t._v("#")]),t._v(" 观察者模式实现")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Picker666/blog-example/blob/main/src/component/designPattern/Observer.jsx",target:"_blank",rel:"noopener noreferrer"}},[t._v("例子"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("1、有观察者（Observer）和被观察者（Subject）两个对象;")]),t._v(" "),a("li",[t._v("2、观察者对被观察者的监听（观察）是需要被观察者来实现的；（Subject.attach）")]),t._v(" "),a("li",[t._v("3、当被观察者发生变化，被观察者会主动通知观察者；")]),t._v(" "),a("li",[t._v("4、观察者只需要实现一个方法，当被观察者变化时执行。")])]),t._v(" "),a("p",[t._v("总结：观察者直接订阅（观察）主题（被观察者），当主题被激活时候，会触发观察者里边的事件。")]),t._v(" "),a("p",[a("strong",[t._v("多个对象之间存在一对多的依赖关系，当一个对象状态发生变化时，所有依赖他的对象都得到通知并被自动更新。")])]),t._v(" "),a("h2",{attrs:{id:"发布订阅模式实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式实现"}},[t._v("#")]),t._v(" 发布订阅模式实现")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Picker666/blog-example/blob/main/src/component/designPattern/PublishSubscriber.jsx",target:"_blank",rel:"noopener noreferrer"}},[t._v("例子"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("1、以调度中心为主;")]),t._v(" "),a("li",[t._v("2、订阅者只需要通过调用中心的方法，订阅相关的事件，并执行订阅方法；")]),t._v(" "),a("li",[t._v("3、发布者只需要通过调度中心的方法，发布相关的事件；")])]),t._v(" "),a("p",[t._v("总结：订阅者把自己想订阅的事件注册到调度中心（Event），当发布者发布该事件的到调度中心，也就是该事件触发时，由调度中心统一调度订阅者注册到调度中心的处理代码。")])])}),[],!1,null,null,null);s.default=e.exports}}]);