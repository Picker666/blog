(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{480:function(t,v,a){"use strict";a.r(v);var _=a(54),i=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-中的函数式编程概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的函数式编程概念"}},[t._v("#")]),t._v(" JavaScript 中的函数式编程概念")]),t._v(" "),a("p",[t._v('函数式编程 是一种"编程范式"（programming paradigm），它不会处理状态, 降低了软件中的复杂性, 使得行为更加可以预测, 代码的可读性更强，增加程序的复用性。')]),t._v(" "),a("p",[t._v("函数式编程引入一些属性或者操作方式")]),t._v(" "),a("ul",[a("li",[t._v("纯函数\n"),a("ul",[a("li",[t._v("相同的输入产生相同的输出 (确定性)")]),t._v(" "),a("li",[t._v("不改变它作用域之外的状态 (无副作用) 或者 依赖的作用域之外的变量是不可变的")])])]),t._v(" "),a("li",[t._v("高阶函数")]),t._v(" "),a("li",[t._v("回调函数")]),t._v(" "),a("li",[t._v("递归")]),t._v(" "),a("li",[t._v("闭包")]),t._v(" "),a("li",[t._v("函数合成")]),t._v(" "),a("li",[t._v("柯里化")])])])}),[],!1,null,null,null);v.default=i.exports}}]);