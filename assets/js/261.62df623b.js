(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{649:function(t,v,_){"use strict";_.r(v);var e=_(54),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"vue2-到-vue3-变化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue2-到-vue3-变化"}},[t._v("#")]),t._v(" Vue2 到 Vue3 变化")]),t._v(" "),_("h2",{attrs:{id:"一、proxy-代替-object-defineproperty"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、proxy-代替-object-defineproperty"}},[t._v("#")]),t._v(" 一、Proxy 代替 Object.defineProperty")]),t._v(" "),_("h3",{attrs:{id:"vue-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-2"}},[t._v("#")]),t._v(" Vue 2")]),t._v(" "),_("p",[t._v("在 Vue2 中双向数据绑定是利用 Object.defineProperty 对数据进行劫持，然后结合发布订阅模式实现的。")]),t._v(" "),_("p",[t._v("通过 Object.defineProperty 劫持数据的 setter 和 getter ，在 getter 时候进行订阅，当发生 setter 发布改变给到订阅者，订阅者收到消息进行相应的更新操作。")]),t._v(" "),_("ul",[_("li",[t._v("1、遍历data中的所有属性，通过Observer（监听器）来完成数据的劫持，如果有变动 即 setter 触发，通知订阅者；")]),t._v(" "),_("li",[t._v("2、Watcher 订阅者，getter 是生成实例存入 发布订阅中心（Dep），setter 触发，执行相应的函数，从而更新视图；")]),t._v(" "),_("li",[t._v("3、Compile 解析器，扫描和解析每个节点的相关指令，并初始化模版数据和初始化相应的订阅；")]),t._v(" "),_("li",[t._v("4、Dep 发布订阅中心，负责收集订阅，属性变化时通知订阅者。")])]),t._v(" "),_("h3",{attrs:{id:"vue3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue3"}},[t._v("#")]),t._v(" Vue3")]),t._v(" "),_("p",[t._v("在 Vue3 中使用 es6 的 Proxy 对数据进行处理，")]),t._v(" "),_("ul",[_("li",[t._v("通过 reactive 函数给对象进行代理，返回代理对象，如果代理对象发生改变， Proxy 可以监听到变化；")]),t._v(" "),_("li",[t._v("通过 ref 函数，对简单数据类型或对象 进行监听或者代理，简单数据类型返回代理对象，value存储原值，对象走 reactive 方法。")])]),t._v(" "),_("p",[t._v("与 Object.defineProperty 相比 Proxy 有以下优势：")]),t._v(" "),_("ul",[_("li",[t._v("1、直接监听对象而非属性，不需要遍历属性，并且可以深层监听；")]),t._v(" "),_("li",[t._v("2、可以监听数组变化；")]),t._v(" "),_("li",[t._v("3、拦截方式较多，不限于 get 和 set；"),_("RouterLink",{attrs:{to:"/base/javascript/Proxy.html"}},[t._v("Proxy")])],1),t._v(" "),_("li",[t._v("4、Proxy 返回新对象，可以直接操作新对象进行修改，Object.defineProperty 只能遍历对象属性进行修改；")]),t._v(" "),_("li",[t._v("5、Proxy作为新标准将受到浏览器厂商重点持续的性能优化。")])]),t._v(" "),_("p",[t._v("需要注意的：")]),t._v(" "),_("ul",[_("li",[t._v("1、简单数据类型需要通过 ref 处理，返回代理对象，值存在对象的value属性中；")]),t._v(" "),_("li",[t._v("2、不管是 对象或者简单数据类型，通过 ref 或者 reactive 处理返回的代理对象不能重新赋值，每次改变只能再此基础上进行修改。")])]),t._v(" "),_("h2",{attrs:{id:"二、组合式api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、组合式api"}},[t._v("#")]),t._v(" 二、组合式API")]),t._v(" "),_("p",[t._v("Vue2 中使用的是选项式API，Vue3 中更推荐使用组合式API，（Composition API）")]),t._v(" "),_("p",[t._v("在选项式API 中，代码被分割成不同的属性，data，computed，methods，watch等等；")]),t._v(" "),_("p",[t._v("在组合式API 中，让我们 coding 更加自由。")]),t._v(" "),_("h2",{attrs:{id:"三、生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、生命周期"}},[t._v("#")]),t._v(" 三、生命周期")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Vue2")]),t._v(" "),_("th",[t._v("Vue3 组合式API")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("beforeCreate")]),t._v(" "),_("td",[t._v("setup")]),t._v(" "),_("td",[t._v("组件创建前")])]),t._v(" "),_("tr",[_("td",[t._v("created")]),t._v(" "),_("td",[t._v("setup")]),t._v(" "),_("td",[t._v("组件创建前")])]),t._v(" "),_("tr",[_("td",[t._v("beforeMount")]),t._v(" "),_("td",[t._v("onBeforeMount")]),t._v(" "),_("td",[t._v("组件挂载前")])]),t._v(" "),_("tr",[_("td",[t._v("mounted")]),t._v(" "),_("td",[t._v("onMounted")]),t._v(" "),_("td",[t._v("组件挂载完成")])]),t._v(" "),_("tr",[_("td",[t._v("beforeUpdate")]),t._v(" "),_("td",[t._v("onBeforeUpdate")]),t._v(" "),_("td",[t._v("组件更新前")])]),t._v(" "),_("tr",[_("td",[t._v("updated")]),t._v(" "),_("td",[t._v("onUpdated")]),t._v(" "),_("td",[t._v("组件更新后")])]),t._v(" "),_("tr",[_("td",[t._v("beforeDestroy")]),t._v(" "),_("td",[t._v("onBeforeDestroy")]),t._v(" "),_("td",[t._v("组件销毁前")])]),t._v(" "),_("tr",[_("td",[t._v("destroyed")]),t._v(" "),_("td",[t._v("onUnmounted")]),t._v(" "),_("td",[t._v("组件销毁后")])])])]),t._v(" "),_("p",[t._v("在 Vue3 中使用 选项式API生命周期不变。")]),t._v(" "),_("h2",{attrs:{id:"四、组件通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、组件通信"}},[t._v("#")]),t._v(" 四、组件通信")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方式")]),t._v(" "),_("th",[t._v("Vue2")]),t._v(" "),_("th",[t._v("Vue3")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("父传子")]),t._v(" "),_("td",[t._v("props")]),t._v(" "),_("td",[t._v("props")])]),t._v(" "),_("tr",[_("td",[t._v("子传父")]),t._v(" "),_("td",[t._v("$emit")]),t._v(" "),_("td",[t._v("emit")])]),t._v(" "),_("tr",[_("td",[t._v("父传子")]),t._v(" "),_("td",[t._v("$attr")]),t._v(" "),_("td",[t._v("attrs")])]),t._v(" "),_("tr",[_("td",[t._v("子传父")]),t._v(" "),_("td",[t._v("$listeners")]),t._v(" "),_("td",[t._v("合并到attrs方式")])]),t._v(" "),_("tr",[_("td",[t._v("父传子")]),t._v(" "),_("td",[t._v("provide")]),t._v(" "),_("td",[t._v("provide")])]),t._v(" "),_("tr",[_("td",[t._v("子传父")]),t._v(" "),_("td",[t._v("inject")]),t._v(" "),_("td",[t._v("inject")])]),t._v(" "),_("tr",[_("td",[t._v("子组件访问父组件")]),t._v(" "),_("td",[t._v("$parent")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[t._v("父组件访问子组件")]),t._v(" "),_("td",[t._v("$children")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[t._v("父组件访问子组件")]),t._v(" "),_("td",[t._v("$ref")]),t._v(" "),_("td",[t._v("expose&ref")])]),t._v(" "),_("tr",[_("td",[t._v("兄弟传值")]),t._v(" "),_("td",[t._v("$EventBus")]),t._v(" "),_("td",[t._v("EventBus（mitt）")])])])]),t._v(" "),_("h2",{attrs:{id:"五、diff-算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、diff-算法"}},[t._v("#")]),t._v(" 五、diff 算法")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/Picker666/vue-origin-source/tree/main/diff",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue diff 原理"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("[Vue diff]")])])}),[],!1,null,null,null);v.default=r.exports}}]);