(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{422:function(v,_,a){"use strict";a.r(_);var e=a(54),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[v._v("#")]),v._v(" 浏览器缓存机制")]),v._v(" "),a("p",[v._v("缓存可以说是性能优化中"),a("strong",[v._v("简单高效")]),v._v("的一种优化方式了，它可以显著减少网络传输所带来的损耗。")]),v._v(" "),a("p",[v._v("对于一个数据请求来说，可以分为三个步骤:")]),v._v(" "),a("ul",[a("li",[v._v("发起网络请求;")]),v._v(" "),a("li",[v._v("后端处理;")]),v._v(" "),a("li",[v._v("浏览器响应。")])]),v._v(" "),a("p",[v._v("浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。")]),v._v(" "),a("p",[v._v("接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：")]),v._v(" "),a("ul",[a("li",[v._v("缓存位置")]),v._v(" "),a("li",[v._v("缓存策略")]),v._v(" "),a("li",[v._v("实际场景应用缓存策略。")])]),v._v(" "),a("h2",{attrs:{id:"缓存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[v._v("#")]),v._v(" 缓存位置")]),v._v(" "),a("p",[v._v("从缓存位置上来说分为四种，并且各自有"),a("strong",[v._v("优先级")]),v._v("，当依次查找缓存且都没有命中的时候，才会去请求网络")]),v._v(" "),a("ul",[a("li",[v._v("1、Service Worker")]),v._v(" "),a("li",[v._v("2、Memory Cache")]),v._v(" "),a("li",[v._v("3、Disk Cache")]),v._v(" "),a("li",[v._v("4、Push Cache")]),v._v(" "),a("li",[v._v("5、网络请求")])]),v._v(" "),a("h3",{attrs:{id:"_1、service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、service-worker"}},[v._v("#")]),v._v(" 1、Service Worker")]),v._v(" "),a("p",[v._v("Service Worker 是运行在浏览器背后的"),a("strong",[v._v("独立线程")]),v._v("，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 "),a("code",[v._v("HTTPS")]),v._v("。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。")]),v._v(" "),a("p",[v._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们"),a("strong",[v._v("自由控制")]),v._v("缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),v._v(" "),a("p",[v._v("当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。")]),v._v(" "),a("h3",{attrs:{id:"_2、memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、memory-cache"}},[v._v("#")]),v._v(" 2、Memory Cache")]),v._v(" "),a("p",[v._v("内存中的缓存，主要包含的是当前中页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。")]),v._v(" "),a("p",[v._v("Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),v._v(" "),a("p",[v._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存")]),v._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/base/browserCache1.awebp",alt:"network"}})]),v._v(" "),a("p",[v._v("那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),v._v(" "),a("p",[v._v("先说结论，这是不可能的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很玄学了，我查阅了很多资料都没有一个定论。")]),v._v(" "),a("p",[v._v("当然，我通过一些实践和猜测也得出了一些结论：")]),v._v(" "),a("ul",[a("li",[v._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),v._v(" "),a("li",[v._v("当前系统内存使用率高的话，文件优先存储进硬盘")])]),v._v(" "),a("h3",{attrs:{id:"_3、disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、disk-cache"}},[v._v("#")]),v._v(" 3、Disk Cache")]),v._v(" "),a("p",[v._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在"),a("strong",[v._v("容量和存储时效性")]),v._v("上")]),v._v(" "),a("p",[v._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache。")]),v._v(" "),a("p",[v._v("memory cache 要比 disk cache 快的多。举个例子：从远程 web 服务器直接提取访问文件可能需要500毫秒(半秒)，那么磁盘访问可能需要10-20毫秒，而内存访问只需要100纳秒，更高级的还有 L1缓存访问(最快和最小的 CPU 缓存)只需要0.5纳秒。")]),v._v(" "),a("p",[v._v("prefetch cache(预取缓存)")]),v._v(" "),a("p",[v._v("link标签上带了prefetch，再次加载会出现。")]),v._v(" "),a("p",[v._v("prefetch是预加载的一种方式，被标记为prefetch的资源，将会被浏览器在"),a("strong",[v._v("空闲时间加载")]),v._v("。")]),v._v(" "),a("h3",{attrs:{id:"_4、push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、push-cache"}},[v._v("#")]),v._v(" 4、Push Cache")]),v._v(" "),a("p",[v._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。"),a("strong",[v._v("并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放")]),v._v("。")]),v._v(" "),a("p",[v._v("在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。")]),v._v(" "),a("p",[v._v("Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 "),a("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP/2 push is tougher than I thought"),a("OutboundLink")],1),v._v(" 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读")]),v._v(" "),a("ul",[a("li",[v._v("所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好")]),v._v(" "),a("li",[v._v("可以推送 no-cache 和 no-store 的资源")]),v._v(" "),a("li",[v._v("一旦连接被关闭，Push Cache 就被释放")]),v._v(" "),a("li",[v._v("多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存")]),v._v(" "),a("li",[v._v("Push Cache 中的缓存只能被使用一次")]),v._v(" "),a("li",[v._v("浏览器可以拒绝接受已经存在的资源推送")]),v._v(" "),a("li",[v._v("你可以给其他域名推送资源")])]),v._v(" "),a("h3",{attrs:{id:"_5、网络请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、网络请求"}},[v._v("#")]),v._v(" 5、网络请求")]),v._v(" "),a("p",[v._v("如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。")]),v._v(" "),a("p",[v._v("那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。")]),v._v(" "),a("h2",{attrs:{id:"缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[v._v("#")]),v._v(" 缓存策略")]),v._v(" "),a("p",[v._v("通常浏览器缓存策略分为两种：")]),v._v(" "),a("ul",[a("li",[v._v("强缓存")]),v._v(" "),a("li",[v._v("和协商缓存")])]),v._v(" "),a("p",[v._v("并且缓存策略都是通过设置 "),a("strong",[v._v("HTTP Header")]),v._v(" 来实现的。")]),v._v(" "),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),a("p",[v._v("存放位置")]),v._v(" "),a("p",[v._v("强缓存我们会把资源房放到memory cache 和 disk cache中，那什么资源放在memory cache，什么资源放在disk cache中？")]),v._v(" "),a("p",[v._v("存存储"),a("strong",[v._v("图像和网页")]),v._v("等资源主要缓存在disk cache，操作系统"),a("strong",[v._v("缓存文件")]),v._v("等资源大部分都会缓存在memory cache中。具体操作浏览器自动分配，看谁的资源利用率不高就分给谁。")]),v._v(" "),a("p",[v._v("强缓存可以通过设置两种 HTTP Header 实现")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("Expires")])]),v._v(" "),a("li",[a("code",[v._v("Cache-Control")])])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("特别关注")]),v._v(" "),a("p",[v._v("强缓存表示在缓存期间不需要请求，state code 为 200。")])]),v._v(" "),a("ul",[a("li",[a("code",[v._v("Expires")])])]),v._v(" "),a("div",{staticClass:"language-http line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[v._v("Expires:")]),v._v(" Wed, 22 Oct 2018 08:41:00 GMT\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("p",[v._v("Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),a("p",[v._v("Expires 受限于"),a("strong",[v._v("本地时间")]),v._v("，如果修改了本地时间，可能会造成缓存失效。")])]),v._v(" "),a("ul",[a("li",[v._v("Cache-control")])]),v._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[v._v("Cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("control"),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" max"),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("30")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("p",[v._v("Cache-Control 出现于 HTTP/1.1，"),a("strong",[v._v("优先级高于")]),v._v(" Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。")]),v._v(" "),a("p",[v._v("Cache-Control 可以在"),a("strong",[v._v("请求头或者响应头")]),v._v("中设置，并且可以组合使用多种指令")]),v._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/base/browserCache2.awebp",alt:"Cache-Control 组合指令"}})]),v._v(" "),a("p",[v._v("从图中我们可以看到，我们可以将"),a("strong",[v._v("多个指令配合起来一起使用")]),v._v("，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。")]),v._v(" "),a("p",[v._v("接下来我们就来学习一些常见指令的作用")]),v._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/base/browserCache3.awebp",alt:"Cache-Control 组合指令"}})]),v._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),a("p",[v._v("如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现：")]),v._v(" "),a("ul",[a("li",[v._v("Last-Modified")]),v._v(" "),a("li",[v._v("ETag")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("特别注意")]),v._v(" "),a("p",[v._v("当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且"),a("strong",[v._v("更新浏览器缓存有效期")]),v._v("。")])]),v._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/base/browserCache4.awebp",alt:"Cache-Control 组合指令"}})]),v._v(" "),a("ul",[a("li",[v._v("Last-Modified 和 If-Modified-Since")])]),v._v(" "),a("p",[v._v("Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码")]),v._v(" "),a("p",[v._v("但是 Last-Modified 存在一些"),a("strong",[v._v("弊端")]),v._v("：")]),v._v(" "),a("ul",[a("li",[v._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源")]),v._v(" "),a("li",[v._v("因为 Last-Modified 只能"),a("strong",[v._v("以秒计时")]),v._v("，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源")])]),v._v(" "),a("p",[v._v("因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag 。")]),v._v(" "),a("ul",[a("li",[v._v("ETag 和 If-None-Match")])]),v._v(" "),a("p",[v._v("ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。")]),v._v(" "),a("p",[v._v("Etag 也存在一些"),a("strong",[v._v("问题")]),v._v(":")]),v._v(" "),a("ul",[a("li",[v._v("每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性;")]),v._v(" "),a("li",[v._v("ETag 是根据静态文件内容计算出来的 hash值，很多情况下并不会用哈希来计算ETag，这会严重浪费服务器端资源。")])]),v._v(" "),a("p",[v._v("以上就是缓存策略的所有内容了，")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("疑问")]),v._v(" "),a("p",[v._v("如果什么缓存策略都没设置，那么浏览器会怎么处理？")]),v._v(" "),a("p",[v._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。")])]),v._v(" "),a("h2",{attrs:{id:"实际场景应用缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际场景应用缓存策略"}},[v._v("#")]),v._v(" 实际场景应用缓存策略")]),v._v(" "),a("p",[v._v("单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。")]),v._v(" "),a("h3",{attrs:{id:"频繁变动的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#频繁变动的资源"}},[v._v("#")]),v._v(" 频繁变动的资源")]),v._v(" "),a("p",[v._v("对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")]),v._v(" "),a("h3",{attrs:{id:"代码文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码文件"}},[v._v("#")]),v._v(" 代码文件")]),v._v(" "),a("p",[v._v("这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。")]),v._v(" "),a("p",[v._v("一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。")])])}),[],!1,null,null,null);_.default=t.exports}}]);