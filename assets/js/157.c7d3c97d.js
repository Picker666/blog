(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{545:function(t,e,r){"use strict";r.r(e);var n=r(54),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"桥接模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[t._v("#")]),t._v(" 桥接模式")]),t._v(" "),r("p",[t._v("桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。")]),t._v(" "),r("p",[t._v("这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。")]),t._v(" "),r("p",[t._v("我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。")]),t._v(" "),r("p",[t._v("...")])])}),[],!1,null,null,null);e.default=s.exports}}]);