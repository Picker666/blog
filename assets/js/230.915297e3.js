(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{618:function(e,a,t){"use strict";t.r(a);var r=t(54),l=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"react-热替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-热替换"}},[e._v("#")]),e._v(" react 热替换")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("1、webpack-dev-server 启动静态服务器，开通 socket 连接;")])]),e._v(" "),t("li",[t("p",[e._v("2、当文件发生修改的时候，webpack会监听到文件变化，然后对模块重新编译打包，并将打包后的代码通过简单对象保存在内存中；")])]),e._v(" "),t("li",[t("p",[e._v("3、webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中；")])]),e._v(" "),t("li",[t("p",[e._v("4、webpack-dev-server 对文件变化的一个监控，变化后会通知浏览器端对应用进行 live reload（配置文件中配置 devServer.watchContentBase： true ）；")])]),e._v(" "),t("li",[t("p",[e._v("5、websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，最主要信息还是新模块的 hash 值；")])]),e._v(" "),t("li",[t("p",[e._v("6、浏览器 将 更新信息传回给webpack，由 webpack 决定是模块热更新还是刷新浏览器；")])]),e._v(" "),t("li",[t("p",[e._v("7、浏览器根据新模块的hash值，发送ajax请求，获取到新模块的所有更新信息，然后在通过jsonp方式获取所要更新的代码；")])]),e._v(" "),t("li",[t("p",[e._v("8、HotModulePlugin 将对比新旧模块，决定是否更新新的模块，并检查新模块的依赖，更新依赖；")])]),e._v(" "),t("li",[t("p",[e._v("9、当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。")])]),e._v(" "),t("li",[t("p",[e._v("1、文件发生更新，webpack打包生成新的模块和新的hash；")])]),e._v(" "),t("li",[t("p",[e._v("2、webpack-dev-server 监听到文件更新和打包过程，并把更新信息告知浏览器（hash）；")])]),e._v(" "),t("li",[t("p",[e._v("3、浏览器通过 ajax 请求获取 本次更新 的详细信息；")])]),e._v(" "),t("li",[t("p",[e._v("4、浏览器通过 Jsonp 的方式获取到更新的模块；")])]),e._v(" "),t("li",[t("p",[e._v("5、HotModulePlugin 对比新旧模块和新旧模块的依赖，并更新。")])])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/bigname22/article/details/127362168",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=l.exports}}]);