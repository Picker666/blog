(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{542:function(t,e,r){"use strict";r.r(e);var a=r(54),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),r("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),r("p",[t._v("本教程将通过 Java 实例，一步一步向您讲解设计模式的概念。")]),t._v(" "),r("p",[r("strong",[t._v("阅读本教程前，您需要了解的知识：")]),t._v("\n在您开始阅读本教程之前，您必须具备基本的 Java 编程的概念。如果您还不了解这些概念，那么建议您先阅读我们的 "),r("a",{attrs:{href:"https://www.runoob.com/java/java-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java"),r("OutboundLink")],1),t._v(" 教程。")]),t._v(" "),r("h2",{attrs:{id:"设计模式的类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[t._v("#")]),t._v(" 设计模式的类型")]),t._v(" "),r("p",[t._v("根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：")]),t._v(" "),r("ul",[r("li",[t._v("创建型模式（Creational Patterns）;")]),t._v(" "),r("li",[t._v("结构型模式（Structural Patterns）")]),t._v(" "),r("li",[t._v("行为型模式（Behavioral Patterns）")]),t._v(" "),r("li",[t._v("当然，我们还会讨论另一类设计模式：J2EE 设计模式。")])]),t._v(" "),r("h3",{attrs:{id:"_1、创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建型模式"}},[t._v("#")]),t._v(" 1、创建型模式")]),t._v(" "),r("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),r("ul",[r("li",[t._v("1、工厂模式（Factory Pattern）")]),t._v(" "),r("li",[t._v("2、抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),r("li",[t._v("3、单例模式（Singleton Pattern）")]),t._v(" "),r("li",[t._v("4、建造者模式（Builder Pattern）")]),t._v(" "),r("li",[t._v("5、原型模式（Prototype Pattern）")])]),t._v(" "),r("h3",{attrs:{id:"_2、结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、结构型模式"}},[t._v("#")]),t._v(" 2、结构型模式")]),t._v(" "),r("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),r("ul",[r("li",[t._v("1、适配器模式（Adapter Pattern）")]),t._v(" "),r("li",[t._v("2、桥接模式（Bridge Pattern）")]),t._v(" "),r("li",[t._v("3、过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),r("li",[t._v("4、组合模式（Composite Pattern）")]),t._v(" "),r("li",[t._v("5、装饰器模式（Decorator Pattern）")]),t._v(" "),r("li",[t._v("6、外观模式（Facade Pattern）")]),t._v(" "),r("li",[t._v("7、享元模式（Flyweight Pattern）")]),t._v(" "),r("li",[t._v("8、代理模式（Proxy Pattern）")])]),t._v(" "),r("h3",{attrs:{id:"_3、行为型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、行为型模式"}},[t._v("#")]),t._v(" 3、行为型模式")]),t._v(" "),r("p",[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),r("ul",[r("li",[t._v("1、责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),r("li",[t._v("2、命令模式（Command Pattern）")]),t._v(" "),r("li",[t._v("3、解释器模式（Interpreter Pattern）")]),t._v(" "),r("li",[t._v("4、迭代器模式（Iterator Pattern）")]),t._v(" "),r("li",[t._v("5、中介者模式（Mediator Pattern）")]),t._v(" "),r("li",[t._v("6、备忘录模式（Memento Pattern）")]),t._v(" "),r("li",[t._v("7、观察者模式（Observer Pattern）")]),t._v(" "),r("li",[t._v("8、状态模式（State Pattern）")]),t._v(" "),r("li",[t._v("9、空对象模式（Null Object Pattern）")]),t._v(" "),r("li",[t._v("10、策略模式（Strategy Pattern）")]),t._v(" "),r("li",[t._v("11、模板模式（Template Pattern）")]),t._v(" "),r("li",[t._v("12、访问者模式（Visitor Pattern）")])]),t._v(" "),r("h3",{attrs:{id:"_4、j2ee-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、j2ee-模式"}},[t._v("#")]),t._v(" 4、J2EE 模式")]),t._v(" "),r("ul",[r("li",[t._v("1、MVC 模式（MVC Pattern）")]),t._v(" "),r("li",[t._v("2、业务代表模式（Business Delegate Pattern）")]),t._v(" "),r("li",[t._v("3、组合实体模式（Composite Entity Pattern）")]),t._v(" "),r("li",[t._v("4、数据访问对象模式（Data Access Object Pattern）")]),t._v(" "),r("li",[t._v("5、前端控制器模式（Front Controller Pattern）")]),t._v(" "),r("li",[t._v("6、拦截过滤器模式（Intercepting Filter Pattern）")]),t._v(" "),r("li",[t._v("7、服务定位器模式（Service Locator Pattern）")]),t._v(" "),r("li",[t._v("8、传输对象模式（Transfer Object Pattern）")])]),t._v(" "),r("p",[t._v("下面用一个图片来整体描述一下设计模式之间的关系：")]),t._v(" "),r("p",[r("img",{attrs:{src:"/blog/images/designPattern/designPattern1.jpg",alt:"设计模式之间图"}})]),t._v(" "),r("h2",{attrs:{id:"设计模式的六大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的六大原则"}},[t._v("#")]),t._v(" 设计模式的六大原则")]),t._v(" "),r("h3",{attrs:{id:"_1、开闭原则-open-close-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、开闭原则-open-close-principle"}},[t._v("#")]),t._v(" 1、开闭原则（Open Close Principle）")]),t._v(" "),r("p",[t._v("开闭原则的意思是："),r("strong",[t._v("对扩展开放，对修改关闭")]),t._v("。")]),t._v(" "),r("p",[t._v("在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。")]),t._v(" "),r("p",[t._v("简言之，是为了使程序的"),r("code",[t._v("扩展性好，易于维护和升级")]),t._v("。想要达到这样的效果，我们需要使用 "),r("strong",[t._v("接口和抽象类")]),t._v("，后面的具体设计中我们会提到这点。")]),t._v(" "),r("h3",{attrs:{id:"_2、里氏代换原则-liskov-substitution-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、里氏代换原则-liskov-substitution-principle"}},[t._v("#")]),t._v(" 2、里氏代换原则（Liskov Substitution Principle）")]),t._v(" "),r("p",[t._v("里氏代换原则是"),r("strong",[t._v("面向对象设计")]),t._v("的基本原则之一。")]),t._v(" "),r("p",[t._v("里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的 "),r("strong",[t._v("补充")]),t._v("。实现开闭原则的关键步骤就是"),r("strong",[t._v("抽象化")]),t._v("，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),t._v(" "),r("h3",{attrs:{id:"_3、依赖倒转原则-dependence-inversion-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、依赖倒转原则-dependence-inversion-principle"}},[t._v("#")]),t._v(" 3、依赖倒转原则（Dependence Inversion Principle）")]),t._v(" "),r("p",[t._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于"),r("strong",[t._v("抽象而不依赖于具体")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"_4、接口隔离原则-interface-segregation-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、接口隔离原则-interface-segregation-principle"}},[t._v("#")]),t._v(" 4、接口隔离原则（Interface Segregation Principle）")]),t._v(" "),r("p",[t._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是："),r("strong",[t._v("降低类之间的耦合度")]),t._v("。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),t._v(" "),r("h3",{attrs:{id:"_5、迪米特法则-又称最少知道原则-demeter-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、迪米特法则-又称最少知道原则-demeter-principle"}},[t._v("#")]),t._v(" 5、迪米特法则，又称最少知道原则（Demeter Principle）")]),t._v(" "),r("p",[t._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),t._v(" "),r("h3",{attrs:{id:"_6、合成复用原则-composite-reuse-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、合成复用原则-composite-reuse-principle"}},[t._v("#")]),t._v(" 6、合成复用原则（Composite Reuse Principle）")]),t._v(" "),r("p",[t._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")])])}),[],!1,null,null,null);e.default=_.exports}}]);