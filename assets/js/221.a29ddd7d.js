(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{609:function(e,v,_){"use strict";_.r(v);var t=_(54),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"merge-or-rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#merge-or-rebase"}},[e._v("#")]),e._v(" merge or rebase")]),e._v(" "),_("p",[_("code",[e._v("merge")]),e._v("和"),_("code",[e._v("rebase")]),e._v("都是用来合并分支的,")]),e._v(" "),_("p",[e._v("以及两个命令的原理，详细解释参考"),_("a",{attrs:{href:"/git/rebase"}},[e._v("这里")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"merge和rebase的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#merge和rebase的区别"}},[e._v("#")]),e._v(" merge和rebase的区别")]),e._v(" "),_("ul",[_("li",[e._v("1、采用"),_("code",[e._v("merge")]),e._v("和"),_("code",[e._v("rebase")]),e._v("后，"),_("code",[e._v("git log")]),e._v("的区别，"),_("code",[e._v("merge")]),e._v("命令会保留"),_("code",[e._v("merge")]),e._v("的分支的"),_("code",[e._v("commit")]),e._v("：")])]),e._v(" "),_("p",[_("img",{attrs:{src:"/blog/images/git/git8.png",alt:"合并操作示意图"}})]),e._v(" "),_("ul",[_("li",[_("p",[e._v("2、处理冲突的方式：")]),e._v(" "),_("ul",[_("li",[e._v("（一股脑）使用"),_("code",[e._v("merge")]),e._v("命令合并分支，解决完冲突，执行"),_("code",[e._v("git add .")]),e._v("和"),_("code",[e._v("git commit -m'fix conflict'")]),e._v("。这个时候会"),_("strong",[e._v("产生")]),e._v("一个"),_("code",[e._v("commit")]),e._v("。")]),e._v(" "),_("li",[e._v("（交互式）使用"),_("code",[e._v("rebase")]),e._v("命令合并分支，解决完冲突，执行"),_("code",[e._v("git add .")]),e._v("和"),_("code",[e._v("git rebase --continue")]),e._v("，"),_("strong",[e._v("不会产生")]),e._v("额外的"),_("code",[e._v("commit")]),e._v("。这样的好处是，‘干净’，分支上不会有无意义的解决分支的"),_("code",[e._v("commit")]),e._v("；坏处，如果合并的分支中存在多个"),_("code",[e._v("commit")]),e._v("，需要重复处理多次冲突。")])])]),e._v(" "),_("li",[_("p",[e._v("3、"),_("code",[e._v("git pull")]),e._v("和git pull --rebase`区别：")])])]),e._v(" "),_("p",[_("code",[e._v("git pull")]),e._v("做了两个操作分别是‘获取’和合并。所以加了"),_("code",[e._v("rebase")]),e._v("就是以"),_("code",[e._v("rebase")]),e._v("的方式进行合并分支，默认为"),_("code",[e._v("merge")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"git-merge-和-git-merge-no-ff的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-git-merge-no-ff的区别"}},[e._v("#")]),e._v(" git merge 和 git merge --no-ff的区别")]),e._v(" "),_("p",[e._v("1、有时候"),_("code",[e._v("merge")]),e._v("命令后，发现："),_("code",[e._v("merge")]),e._v("时并没有产生一个"),_("code",[e._v("commit")]),e._v("。不是说"),_("code",[e._v("merge")]),e._v("时会产生一个merge "),_("code",[e._v("commit")]),e._v("吗？")]),e._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),_("p",[e._v("只有在冲突的时候，解决完冲突才会自动产生一个"),_("code",[e._v("commit")]),e._v("。")])]),e._v(" "),_("p",[e._v("如果想在没有冲突的情况下也自动生成一个commit，记录此次合并就可以用："),_("code",[e._v("git merge --no-ff")]),e._v("命令，下面用一张图来表示两者的区别")]),e._v(" "),_("p",[_("img",{attrs:{src:"/blog/images/git/git9.png",alt:"有无--no-ff对比示意图"}})]),e._v(" "),_("p",[e._v("2、如果不加 "),_("code",[e._v("--no-ff")]),e._v(" 则被合并的分支之前的"),_("code",[e._v("commit")]),e._v("都会被抹去，只会保留一个解决冲突后的 "),_("code",[e._v("merge commit")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"如何选择合并分支的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何选择合并分支的方式"}},[e._v("#")]),e._v(" 如何选择合并分支的方式")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("git merge")]),e._v(" "),_("ul",[_("li",[e._v("主分支会有很多多余的commit，对强迫症来说很难受，")]),e._v(" "),_("li",[e._v("但是，可以很清晰的看出每次合并的发生过程，对代码历史问题的查找还是很有帮助的；")]),e._v(" "),_("li",[e._v("并且，不需要删除个人分支，开发者个人分支在每次往主分支合并前，合并来自主分支的代码，并解决冲突；")])])]),e._v(" "),_("li",[_("p",[e._v("git rebase")]),e._v(" "),_("ul",[_("li",[e._v("主分支比较干净，所有的commit都是来自于开发者的提交，并且按顺序排好；")]),e._v(" "),_("li",[e._v("如果在rebase主分支代码时候有多个commit，要重复处理冲突；")]),e._v(" "),_("li",[e._v("要避免合并时候重复处理冲突的问题，就需要经常去合并主分支的代码。")])])]),e._v(" "),_("li",[_("p",[e._v("结合")]),e._v(" "),_("ul",[_("li",[e._v("获取远程项目中最新代码时："),_("code",[e._v("git pull --rebase")]),e._v("，这个时隐性的合并远程分支的代码不会产生而外的commit（但是如果存在冲突的commit太多就像上面说的，需要处理很多遍冲突）。")]),e._v(" "),_("li",[e._v("合并到分支的时候：git merge --no-ff，自动一个merge commit，便于管理（个人认为）。")])])])])])}),[],!1,null,null,null);v.default=o.exports}}]);